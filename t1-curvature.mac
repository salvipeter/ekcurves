/* -*- mode: maxima -*- */

/*
 Input:
   (x0,y0) and (x2,y2) - the endpoints
   (px,py)             - the point to interpolate at the maximal curvature
   r                   - alpha, the ratio for the conversion between "linear" & "quadratic"
 Output:
   ...?
 */

exponentialize: true$ /* Automatically convert trigonemetric functions to exponential form */
S: sin(%pi*t/2)$
C: cos(%pi*t/2)$
a: 1-S$
b: S+C-1$
c: 1-C$

/* (cx,cy) is the curve, (dx,dy) and (ddx,ddy) are the 1st and 2nd derivatives */
cx: a^2*x0+2*a*b*((1-r)*x0+r*x1)+2*a*c*((1-r)*x0+2*r*x1+r*x2)+2*b*c*((1-r)*x2+r*x1)+c^2*x2$
cy: a^2*y0+2*a*b*((1-r)*y0+r*y1)+2*a*c*((1-r)*y0+2*r*y1+r*y2)+2*b*c*((1-r)*y2+r*y1)+c^2*y2$
dx: diff(cx,t)$
dy: diff(cy,t)$
ddx: diff(dx,t)$
ddy: diff(dy,t)$

/* n and d are the numerator and denominator of the curvature, respectively */
n: dx*ddy-ddx*dy$
d: (dx^2+dy^2)^(3/2)$

/* The numerator of the curvature's derivative; we need to solve dk = 0 */
dk: diff(n,t)-n*3/2*diff(dx^2+dy^2,t)$
/* Looking at factor(dk), we can see that there is some room for simplification */
dk1: factor(256*dk/(3*%pi^4*%e^-((7*%i*%pi*t)/2)))$
solution: rhs(solve(dk1,t)[1])$

/* (x1,y1) is set s.t. the curve interpolates (px,py) */
x1: (px-((a^2+2*a*(b+c)*(1-r))*x0+(2*a*c*r+2*b*c*(1-r)+c^2)*x2))/(2*(a*b+2*a*c+b*c)*r)$
y1: (py-((a^2+2*a*(b+c)*(1-r))*y0+(2*a*c*r+2*b*c*(1-r)+c^2)*y2))/(2*(a*b+2*a*c+b*c)*r)$

/* Generate a string representation that can be inserted in a program */
display2d: false$ /* programming-friendly output */
collectterms(expand(num(xthru(ev(solution,x1=x1,y1=y1)))),t);
