/* -*- mode: maxima -*- */

/*
 Input:
   (x0,y0) and (x2,y2) - the endpoints
   (px,py)             - the point to interpolate at the maximal curvature
   r                   - alpha, the ratio for the conversion between "linear" & "quadratic"
 Output:
   <18th-degree polynomial in %e^(%i*%pi*t/2)>
 */

exponentialize: true$ /* Automatically convert trigonemetric functions to exponential form */
S: sin(%pi*t/2)$
C: cos(%pi*t/2)$
a: 1-(1-r)*S^2-r*S$
b: r*(S+C-1)$
c: 1-(1-r)*C^2-r*C$

/* (cx,cy) is the curve, (dx,dy) and (ddx,ddy) are the 1st and 2nd derivatives */
cx: a*x0+b*x1+c*x2$
cy: a*y0+b*y1+c*y2$
dx: diff(cx,t)$
dy: diff(cy,t)$
ddx: diff(dx,t)$
ddy: diff(dy,t)$

/* n and d are the numerator and denominator of the curvature, respectively */
n: dx*ddy-ddx*dy$
d: (dx^2+dy^2)^(3/2)$

/* The numerator of the curvature's derivative; we need to solve dk = 0 */
dk: diff(n,t)-n*3/2*diff(dx^2+dy^2,t)$
/* Looking at factor(dk), we can see that there is some room for simplification */
dk1: factor(1024*dk/-(3*%pi^4*r*%e^-((7*%i*%pi*t)/2)*(x1*y2-x0*y2-x2*y1+x0*y1+x2*y0-x1*y0)))$

solution: rhs(solve(dk1,t)[1])$

/* (x1,y1) is set s.t. the curve interpolates (px,py) */
x1: (px-a*x0-c*x2)/b$
y1: (py-a*y0-c*y2)/b$

/* Generate a string representation that can be inserted in a program */
display2d: false$ /* programming-friendly output */
collectterms(expand(num(xthru(ev(solution,x1=x1,y1=y1)))),t);
